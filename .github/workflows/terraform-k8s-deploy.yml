name: Terraform Deploy Web App

on:
  workflow_dispatch:
    inputs:
      apply-changes:
        description: "Apply changes"
        type: boolean
        default: false

env:
  DOCKER_IMAGE: case-study-web-app
  DOCKER_USERNAME: luissanzaguilar
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}

jobs:
  deploy-infra:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    environment: prod

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-3

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -out=tfplan
        working-directory: ./terraform

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ./terraform/tfplan

      - name: Terraform Apply
        run: terraform apply -var="runner_token=${{ secrets.RUNNER_TOKEN }}" -auto-approve -input=false tfplan
        working-directory: ./terraform
        if: ${{ inputs.apply-changes }}

      - name: Get Terraform Outputs
        run: terraform output -json > outputs.json
        working-directory: ./terraform

      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ./terraform/outputs.json

      - name: Success Notification
        if: success()
        working-directory: ./terraform
        run: |
          echo "Terraform deployment success!"
          echo "ssh: $(terraform output -raw ssh_connection_command)"
          echo "log execution of user-data: tail -n 1000 -f /var/log/user-data.log"

  sonar-cloud:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify

      - name: Official SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.working.directory=./.scannerwork
            -Dsonar.java.binaries=target/classes

      - name: Official SonarQube Quality Gate
        if: false # Disabled for testing purposes
        uses: SonarSource/sonarqube-quality-gate-action@v1.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt

  push-docker:
    needs: sonar-cloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Docker Login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}
      - name: Build Docker Image
        run: docker build -t ${{env.DOCKER_IMAGE}}:${{github.sha}} .
      - name: Tag Docker Image
        run: docker tag $DOCKER_IMAGE:${{github.sha}} $DOCKER_USERNAME/$DOCKER_IMAGE:latest
      - name: Push docker image
        run: |
          docker push $DOCKER_USERNAME/$DOCKER_IMAGE:latest

  deploy-k8s:
    needs: push-docker
    runs-on: self-hosted-k8s
    environment: prod
    steps:
      - name: Docker Login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}
      - name: Pull docker image
        run: |
          docker pull $DOCKER_USERNAME/$DOCKER_IMAGE:latest
      - name: Docker run STAGING
        working-directory: ./k8s
        env:
          APP_WELCOME_MESSAGE: ${{ vars.APP_WELCOME_MESSAGE }}
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
          
