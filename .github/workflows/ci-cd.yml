name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    
env:
  DOCKER_IMAGE: case-study-web-app
  DOCKER_USERNAME: luissanzaguilar
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}

jobs:
  build:
    name: Build and Test (${{ matrix.distribution }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distribution: [temurin, corretto, liberica, microsoft]
        include:
          - distribution: temurin
            jdk-version: '21'
            display-name: Eclipse Temurin 21
          - distribution: corretto  
            jdk-version: '21'
            display-name: Amazon Corretto 21
          - distribution: liberica
            jdk-version: '21'
            display-name: BellSoft Liberica 21
          - distribution: microsoft
            jdk-version: '21'
            display-name: Microsoft 21
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up JDK 21 (${{ matrix.display-name }})
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.jdk-version }}
          distribution: ${{ matrix.distribution }}
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify       
      - name: Prepare artifact in staging
        run: mkdir staging && cp target/*.jar staging
      - name: Upload a Build Artifact for ${{ matrix.distribution }}
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Package-${{ matrix.distribution }}
          path: staging

  sonar-cloud:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify
        
      - name: Official SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.working.directory=./.scannerwork
            -Dsonar.java.binaries=target/classes
                  
      - name: Official SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
          
  push-docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Docker Login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}
      - name: Build Docker Image
        run: docker build -t ${{env.DOCKER_IMAGE}}:${{github.sha}} .
      - name: Tag Docker Image
        run: docker tag $DOCKER_IMAGE:${{github.sha}} $DOCKER_USERNAME/$DOCKER_IMAGE:latest
      - name: Push docker image
        # docker push $DOCKER_IMAGE:${{github.sha}}          
        run: |
          docker push $DOCKER_USERNAME/$DOCKER_IMAGE:latest
          
  deploy-staging:
    needs: [push-docker, sonar-cloud]
    runs-on: self-hosted-staging
    environment: staging    
    steps:
      - name: Docker Login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}
      - name: Pull docker image
        # docker pull $DOCKER_IMAGE:${{github.sha}}          
        run: |
          docker pull $DOCKER_USERNAME/$DOCKER_IMAGE:latest
      - name: Docker run STAGING
        env:
          APP_WELCOME_MESSAGE: ${{ vars.APP_WELCOME_MESSAGE }}
        run: |
          docker stop case-study-web-app
          docker rm case-study-web-app          
          docker run -d \
            --name $DOCKER_IMAGE \
            -p 8080:8080 \
            -e APP_WELCOME_MESSAGE="$APP_WELCOME_MESSAGE" \
            $DOCKER_USERNAME/$DOCKER_IMAGE:latest

  deploy-prod:
    needs: deploy-staging
    runs-on: self-hosted-prod
    environment: prod
    steps:
      - name: Docker Login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}
      - name: Pull docker image
        # docker pull $DOCKER_IMAGE:${{github.sha}}          
        run: |
          docker pull $DOCKER_USERNAME/$DOCKER_IMAGE:latest
      - name: Docker run PROD
        env:
          APP_WELCOME_MESSAGE: ${{ vars.APP_WELCOME_MESSAGE }}
        run: |
          docker stop case-study-web-app
          docker rm case-study-web-app          
          docker run -d \
            --name $DOCKER_IMAGE \
            -p 8080:8080 \
            -e APP_WELCOME_MESSAGE="$APP_WELCOME_MESSAGE" \
            $DOCKER_USERNAME/$DOCKER_IMAGE:latest

  error-handling:
    name: Error Handling
    runs-on: ubuntu-latest
    needs: 
      - build
      - sonar-cloud
      - push-docker
      - deploy-staging
      - deploy-prod
    if: | 
          always() && 
          (needs.build.result == 'failure' || 
          needs.sonar-cloud.result == 'failure' ||
          needs.push-docker.result == 'failure' ||
          needs.deploy-staging.result == 'failure' ||
          needs.deploy-prod.result == 'failure')
    steps:
      - name: Print failed jobs
        run: |
          failed_jobs=""
          if [ "${{ needs.build.result }}" = "failure" ]; then
            failed_jobs="$failed_jobs build"
          fi
          if [ "${{ needs.sonar-cloud.result }}" = "failure" ]; then
            failed_jobs="$failed_jobs build"
          fi
          if [ "${{ needs.push-docker.result }}" = "failure" ]; then
            failed_jobs="$failed_jobs build"
          fi
          if [ "${{ needs.deploy-staging.result }}" = "failure" ]; then
            failed_jobs="$failed_jobs build"
          fi
          if [ "${{ needs.deploy-prod.result }}" = "failure" ]; then
            failed_jobs="$failed_jobs build"
          fi
          echo "Failed jobs: $failed_jobs"
                    
  success-notification:
    name: Prod Deployment Success Notification
    runs-on: ubuntu-latest
    needs: deploy-prod
    if: success()    
    
    steps:
      - name: Print deployment info
        run: |
          echo "DEPLOYMENT COMPLETADO EN PROD"
          echo "============================="
          echo "Application: ${{ env.DOCKER_IMAGE }}"
          echo "Environment: Production"
          echo "Status: âœ… Success"
          echo "SHA: ${{ github.sha }}"
          echo "By: ${{ github.actor }}"
          echo "Time: $(date +"%Y-%m-%d %H:%M:%S")"
          echo "URL: http://localhost:8080"          
          
