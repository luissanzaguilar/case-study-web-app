name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    
env:
  DOCKER_IMAGE: case-study-web-app
  DOCKER_USERNAME: luissanzaguilar
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify       
      - name: Prepare artifact in staging
        run: mkdir staging && cp target/*.jar staging
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Package
          path: staging

  sonar-cloud:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify
        
      - name: Official SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.working.directory=./.scannerwork
            -Dsonar.java.binaries=target/classes
                  
      - name: Official SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
          
  push-docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Docker Login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}
      - name: Build Docker Image
        run: docker build -t ${{env.DOCKER_IMAGE}}:${{github.sha}} .
      - name: Tag Docker Image
        run: docker tag $DOCKER_IMAGE:${{github.sha}} $DOCKER_USERNAME/$DOCKER_IMAGE:latest
      - name: Push docker image
        # docker push $DOCKER_IMAGE:${{github.sha}}          
        run: |
          docker push $DOCKER_USERNAME/$DOCKER_IMAGE:latest
          
  deploy-staging:
    needs: [push-docker, sonar-cloud]
    runs-on: self-hosted-staging
    steps:
      - name: Docker Login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}
      - name: Pull docker image
        # docker pull $DOCKER_IMAGE:${{github.sha}}          
        run: |
          docker pull $DOCKER_USERNAME/$DOCKER_IMAGE:latest
      - name: Docker run STAGING ${{ vars.APP_WELCOME_MESSAGE }}
        env:
          APP_WELCOME_MESSAGE: ${{ vars.APP_WELCOME_MESSAGE }}
        run: |
          docker run -d -p 8080:8080 $DOCKER_USERNAME/$DOCKER_IMAGE:latest

  deploy-prod:
    needs: deploy-staging
    runs-on: self-hosted-prod
    steps:
      - name: Docker Login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{env.DOCKER_USERNAME}}
          password: ${{env.DOCKER_PASSWORD}}
      - name: Pull docker image
        # docker pull $DOCKER_IMAGE:${{github.sha}}          
        run: |
          docker pull $DOCKER_USERNAME/$DOCKER_IMAGE:latest
      - name: Docker run PROD ${{ vars.APP_WELCOME_MESSAGE }}
        env:
          APP_WELCOME_MESSAGE: ${{ vars.APP_WELCOME_MESSAGE }}
        run: |
          docker run -d -p 8080:8080 $DOCKER_USERNAME/$DOCKER_IMAGE:latest

          
          

